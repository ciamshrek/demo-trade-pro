#!/usr/bin/env bash
# Generate Auth0 Management Client for Terraform
# Assumes Auth0 CLI is already set up with proper scopes

set -euo pipefail

# Get absolute paths for reliable execution
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
AUTH0_AGENT_DIR="$(dirname "$SCRIPT_DIR")"
TFVARS_FILE="$AUTH0_AGENT_DIR/terraform/terraform.tfvars"

APP_NAME="${1:-StockTrade-Terraform}"

command -v auth0 >/dev/null 2>&1 || { echo >&2 "Auth0 CLI not installed"; exit 1; }
command -v jq >/dev/null 2>&1 || { echo >&2 "jq is required but not installed"; exit 1; }

# Validate directory structure
if [ ! -d "$(dirname "$TFVARS_FILE")" ]; then
  echo "Error: Terraform directory not found at $(dirname "$TFVARS_FILE")"
  exit 1
fi

echo "🚀 Generate Auth0 Management Client"
echo "Creating M2M application: $APP_NAME"
echo ""

# Get tenant domain
TENANT_DOMAIN=$(auth0 tenants list --csv | grep '^→' | cut -d',' -f2 | tr -d ' ')
if [ -z "$TENANT_DOMAIN" ]; then
  echo "❌ Unable to determine active tenant"
  exit 1
fi
echo "✅ Using tenant: $TENANT_DOMAIN"

# Create M2M application
echo "🔨 Creating M2M application..."
APP_JSON=$(auth0 apps create --name "$APP_NAME" --type m2m --json --reveal-secrets)

CLIENT_ID=$(echo "$APP_JSON" | jq -r '.client_id')
CLIENT_SECRET=$(echo "$APP_JSON" | jq -r '.client_secret')

if [ "$CLIENT_ID" = "null" ] || [ "$CLIENT_SECRET" = "null" ]; then
  echo "❌ Failed to extract credentials"
  exit 1
fi
echo "✅ Created application: $CLIENT_ID"

# Grant all Management API scopes
echo "🔐 Granting Management API scopes..."
MANAGEMENT_API_ID="https://$TENANT_DOMAIN/api/v2/"

# All scopes for full Management API access
SCOPES=(
  "create:client_grants" "read:client_grants" "update:client_grants" "delete:client_grants"
  "create:clients" "read:clients" "update:clients" "delete:clients"
  "read:client_keys" "update:client_keys" "create:client_keys" "delete:client_keys"
  "create:connections" "read:connections" "update:connections" "delete:connections"
  "create:users" "read:users" "update:users" "delete:users"
  "create:users_app_metadata" "read:users_app_metadata" "update:users_app_metadata" "delete:users_app_metadata"
  "read:user_idp_tokens"
  "create:roles" "read:roles" "update:roles" "delete:roles"
  "create:role_members" "read:role_members" "delete:role_members"
  "create:resource_servers" "read:resource_servers" "update:resource_servers" "delete:resource_servers"
  "create:rules" "read:rules" "update:rules" "delete:rules"
  "create:actions" "read:actions" "update:actions" "delete:actions"
  "create:triggers" "read:triggers" "update:triggers"
  "create:hooks" "read:hooks" "update:hooks" "delete:hooks"
  "create:email_provider" "read:email_provider" "update:email_provider" "delete:email_provider"
  "create:email_templates" "read:email_templates" "update:email_templates"
  "read:guardian_enrollments" "delete:guardian_enrollments" "create:guardian_enrollment_tickets"
  "read:logs" "read:stats" "read:tenant_settings" "update:tenant_settings"
  "read:anomaly_blocks" "delete:anomaly_blocks"
  "create:device_credentials" "read:device_credentials" "update:device_credentials" "delete:device_credentials"
  "read:grants" "delete:grants"
  "read:mfa_policies" "update:mfa_policies"
  "create:organization_members" "read:organization_members" "delete:organization_members"
  "create:organization_connections" "read:organization_connections" "update:organization_connections" "delete:organization_connections"
  "create:organization_member_roles" "read:organization_member_roles" "delete:organization_member_roles"
  "create:organization_invitations" "read:organization_invitations" "delete:organization_invitations"
  "create:organizations" "read:organizations" "update:organizations" "delete:organizations"
  "create:custom_domains" "read:custom_domains" "update:custom_domains" "delete:custom_domains"
  "read:branding" "update:branding" "delete:branding"
  "read:prompts" "update:prompts"
  "read:signing_keys" "update:signing_keys"
  "create:log_streams" "read:log_streams" "update:log_streams" "delete:log_streams"
  "read:attack_protection" "update:attack_protection"
  "read:client_credentials" "update:client_credentials"
)

SCOPE_JSON=$(printf '"%s",' "${SCOPES[@]}" | sed 's/,$//')
GRANT_DATA="{\"client_id\":\"$CLIENT_ID\",\"audience\":\"$MANAGEMENT_API_ID\",\"scope\":[${SCOPE_JSON}]}"

# Create client grant
auth0 api post "client-grants" --data "$GRANT_DATA" >/dev/null
echo "✅ Management API access granted"

# Generate terraform.tfvars
echo "📝 Generating terraform.tfvars..."
cat > "$TFVARS_FILE" <<EOF
# Generated by Auth0 management client script - $(date)
# Auth0 Management API credentials for Terraform
auth0_domain        = "$TENANT_DOMAIN"
auth0_client_id     = "$CLIENT_ID"
auth0_client_secret = "$CLIENT_SECRET"

# Project Configuration
project_name        = "StockTrade"

# Application URLs
agent_base_url        = "http://localhost:3003"
agent_callback_url    = "http://localhost:3003/auth/callback"
api_base_url        = "http://localhost:3001"
api_identifier      = "https://api.stocktrade.example"
EOF

echo "✅ Setup complete!"
echo ""
echo "📋 Summary:"
echo "   • Application: $APP_NAME"
echo "   • Client ID: $CLIENT_ID"
echo "   • Domain: $TENANT_DOMAIN"
echo "   • Config: $TFVARS_FILE"
echo ""
echo "🔧 Next steps:"
echo "   1. cd terraform && terraform init && terraform apply"
echo "   2. ./scripts/generate-web-env.sh"
echo "   3. ./scripts/generate-api-env.sh"
